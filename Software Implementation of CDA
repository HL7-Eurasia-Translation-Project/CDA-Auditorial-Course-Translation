http://wiki.hl7.org/index.php?title=Software_Implementation_of_CDA (версия от 26-го июня 2015 года).
 
Программная реализация CDA
Software Implementation of CDA

Данный документ входит в набор технической документации, составленный AID Work Group. 
This whitepaper is one of a series of whitepapers created by the AID Work Group. 

Документ основывается на реальном опыте реализации стандарта CDA и создавался с целью документирования передового опыта 
(лучших практик) или паттернов реализации.
The whitepaper is based on actual CDA implementation experiences and aims to document a best practice or an implementation 
pattern.

Содержимое настоящего документа (его данной версии) была утверждена AID WG 2015-05-11 и отражает лучшие на настоящий момент 
паттерны реализации стандарта.
The contents of this whitepaper (this particular version) were approved by the AID WG on 2015-05-11 as a reflection of 
current best practice. 

Повторное утверждение документа пройдет в мае 2016 года. 
The white paper will be up for approval again in May 2016. 

Настоящий документ не является конечным, возможно его обновление и изменение в любой момент времени.
This is a "living" document, it may be updated by any person at any point in time.

Short URL: http://j.mp/gDwZKm - See also: CDA Implementation Tools

- - - -

Краткое описание
Summary

В настоящей статье поднимается вопрос разработки программного обеспечения, поддерживающего модель CDA R2.
This paper addresses the creation of a software application that has to support the CDA R2 model. 

В ней обсуждается архитектура приложений, различные подходы к генерации кода и обеспечению хранимости документов (persistence).
It discusses the application architecture, and discusses various approaches with regards to code generation and persistence.

Несмотря на соблазн использования XML-подхода к созданию, валидации и грамматическому разбору CDA-документов, настоящий
документ демонстрирует несостоятельность данного подхода, связанную с высоким риском создания экземпляров документов, 
несовместимых CDA.
Although it is tempting to use XML techniques to support the creation, validation and parsing of CDA documents this paper shows
that this approach is associated with a high risk of non conformant CDA instances. 

Для обеспечения совместимости со стандартом CDA необходимо использовать генератор кода классов (class code generator),
основанный на модели CDA R2, а также соответствующие руководства по реализации и подходящие шаблоны.
A model driven class code generator should be used if one wants to ensure compliance with the CDA standard as well as 
the appropriate implementation guide and associated templates.

Обратите внимание: данный документ предполагает, что (разрабатываемое) приложение должно поддерживать только одну модель HL7 
v3.
Note: this paper assumes the application has to support one HL7 version 3 model (CDA) only. 

Существует нежелательная вероятность "залочивания" приложения на определенной модели (или R-MIM - уточненной модели).
There are drawbacks to locking down an application to a specific SIM (a.k.a. R-MIM). 

The use-case whereby one needs to support multiple version 3 SIMs is covered in these discussion pages: 
Schema based code generation and MIF based code generation.


Введение
Introduction

Стандарт электронного документа HL7 (Архитектуры клинических документов или CDA) является частью стандарта HL7 третьей версии.
The HL7 e-Document standard (Clinical Document Architecture or CDA) is part of the HL7 version 3 standard. 

Текущий релиз стандарта (второй релиз) был опубликован в 2005 году.
The current release of that standard (Release 2) was published in 2005. 

CDA-документы используются в большом кол-ве проектов, часто совместно с обменом сообщениями и сервисами, основанными на 
стандарте HL7 v3.
CDA documents are used in a large number of projects, quite often in combination with HL7 version 3 messages or services. 

This article covers the development of software applications that have to support the CDA standard.
В настоящей статье поднимается вопрос разработки программного обеспечения, поддерживающего стандарт CDA.

Основная целевая группа настоящего документа - архитекторы приложений и разработчики ПО.
The primary audience consists of application architects and software developers.

Реализация стандарта CDA и валидация экземпляров XML-документов, соответствующих стандарту CDA, основывается на двух
типах спецификаций: модели классов CDA и уточнениях базовой информационной модели HL7 (HL7 RIM).
The implementation of the CDA standard and the validation of CDA-conform XML instances is based on two types of specifications:
The CDA class model, a refinement of the HL7 Reference Information Model (RIM). 

Модель классов выражена в формате обмена моделями (MIF - Model Interchange Format), формате мета-модели, используемом HL7 для
всех артефактов версии 3 или всех их проихводных, таких как UML или XML Schema.
The class model is expressed in MIF (Model Interchange Format), the meta model format used by HL7 for all version 3 artefacts,
or in derivations thereof such as UML or XML Schema. 

Модель классов CDA ссылается на типы данных и системы кодирования HL7 v3.
The CDA class model references HL7 version 3 data types and coding systems.

Контекстно-специфические ограничения (шаблоны) общей модели CDA, определяются в руководстве по реализации CDA для конкретных
типов документов и конкретного контекста (например, страны или проекта).
Context-specific constraints (Templates) of the generic CDA model, as defined in a CDA implementation guide for specific 
document type and one specific context (e.g. country or project). 

Шаблоны могут выражать ограничения, накладываемые на саму модель классов, на использование типов данных, на значения, 
определенные системами кодирования, или они также могут являться выражением определенных бизнес-правил.
Templates could express constraints on the class model itself, on the use of data types, on the values defined by 
coding systems, or they could be expressions of business rules. 

Примером последней категории являются (т.е. выражающих конкретные бизнес-правила) шаблоны, которые определяют, что "дата 
создания" отчета о родах (natal report) не должна отличаться от даты фактического рождения ребенка более чем на 7 дней.
An example of the latter category is a template which defines that the 'creation date' of “Natal report” documents SHALL be
no more than 7 days after the birth of the child.

На данный момент шаблоны могут определяться в форме текстового описания будучи частью руководства по реализации CDA;
они могут впоследствии (вручную) переведены в программно-обрабатываемые спецификации, такие как OCL или Schematron. 
At this point in time Templates are defined either in textual form as part of a CDA implementation guide; 
these can be (manually) transformed into software processable specifications such as OCL or Schematron. 

Многие руководства по реализации публикуются совместно с Schematron-версиями шаблонов.
Many implementation guides are being published jointly with Schematron-based versions of the templates.

Шаблоны также могут быть представлены в электронной форме, поддерживаемой инструментами разрабтки шаьблонов (template design
tools).
electronic form as supported by template design tools. 

Подлежащий электронный формат является (на настоящий момент) проприетарным в случае с Lantana’s Trifolia 
(http://www.lantanagroup.com/newsroom/press-releases/trifolia-workbench-hl7-web-edition/) или основывается на DSTU шаблонах 
HL7 (Стандарт шаблонов HL7: спецификация и использование повторно используемых шаблонов, ограничивающих наборы данных, релиз 1)
в отношении ART-DECOR (http://www.art-decor.org). 
The underlying electronic format is (as of yet) proprietary in the case of Lantana’s Trifolia 
(http://www.lantanagroup.com/newsroom/press-releases/trifolia-workbench-hl7-web-edition/), or is based on the HL7 Templates 
DSTU (HL7 Templates Standard: Specification and Use of Reusable Information Constraint Templates, Release 1) in the case of 
ART-DECOR (http://www.art-decor.org).

Недавно (2014) HL7 опубликовала стандарт представления определений шаблонов (DSTU-стандарт шаблонов HL7).
Recently (2014) HL7 has published a standard for the expression of template definitions (the DSTU HL7 Templates Standard). 

Данный формат находится в процессе принятия редакторами шаблонов, репозиториями шаблонов, также как инструментами работы с 
Schematron'ами и средствами генерации кода.
This format is in the process of being adopted by Template Editors, Template Repositories, as well as Schematron and code 
generation tools. 

Инструмент ART-DECOR уже встроен в DSTU, может создавать, редактировать и управлять шаблонами, генерировать schematron'ы на
основании определений шаблонов, валидировать экземпляры документов; кроме того инструмент ART-DECOR такеж выступает в роли
реестра и репозитория шаблонов и соответствующих наборов значений.
The ART-DECOR tool already incorporated the DSTU, can create, edit and manage templates, generate schematrons out of the 
definitions, validate instances and acts both as a registry and a repository for templates and accompanying value sets. 

ART-DECOR также выступает в роли эталонного средства  для стандарта шаблонов DSTU.
ART-DECOR also acts as a reference tools for the Templates DSTU.

Аспект управления шаблонами является важнейшим вопросом: единственное руководство по реализации CDA может определять сотни
шаблонов - которые довольно часто определяются как шалоны в других (более общих) руководствах по реализации CDA.
The management aspect of templates is a major issue: a single CDA implementation guide may define hundreds of templates – 
which are quite often defined in terms of templates defined in other (more generic) CDA implementation guides. 

Данный вопрос также продемонстрирован созданием всеамериканского консолидированного руководства по реализации CDA (или CCDA)
- число шаблонов (например, определенных IHE, HL7 и HITSP) и несовместимостей между ними повлияло на необходимость 
консолидации ряда определений шаблонов.
This issue is also illustrated by the creation of a US-Realm Consolidated CDA implementation guide (a.k.a. CCDA) - 
the number of templates (e.g. as defined by IHE, HL7, and HITSP) and the incompatibilities between them made it necessary 
to consolidate a number of template definitions.

MIF и XML-схема
MIF and XML schema

HL7 MIF-определение модели классов CDA предоставляется в стандарте HL7 v3.
A HL7 MIF definition of the CDA class model is provided with the HL7 v3 standard. 

CDA MIF-файл может трансформироваться в менее "насыщенные" выражения, такие какие как UML или XML-схемы.
The CDA MIF file can be transformed into less "rich" expressions such as UML and XML schema. 

Части требований, выраженные с помощью MIF, теряются в процессе трансформации.
Parts of the requirements as expressed by the MIF are lost during the transformation process.

CDA instances are based on XML and the standard requires that all CDA instances validate (at a minimum) against a published 
CDA XML schema. 
Экземпляры CDA основываются на XML и стандарт требует, чтобы все CDA-документы проходили валидацию (как минимум) по 
опубликованной CDA XML-схеме.

Это главная причина, почему множество CDA-реализаций основаны на CDA XML-схеме.
This is the main reason why a lot of CDA implementations are based on the CDA XML schema. 

Широкая доступность XML-инструментов является определенным преимуществом; однако, есть также и недостатки.
The wide availability of XML tools is a definite advantage; there are disadvantages as well. 

Язык XML Schema недостаточно насыщен (rich) для выржаения всех требований, присутствующих в оригинальной модели классов CDA.
The XML schema language is not rich enough by far to express all of the requirements as present in the original CDA 
class model. 

Экземпляр CDA-документа, который проходит валидацию по XML-схеме, не обязательно является валидным CDA-документом -
чтобы быть валидным CDA-документом необходимо создать XML-документ, которые отвечает всем требованиям, выраженным в модели 
классов CDA.
A CDA document instance that validates against the XML schema is not guaranteed to be a valid CDA instance - 
to be a valid CDA instance one has to create XML that conforms to the requirements that are expressed in the CDA class model.

Примеры ограниченных возможностей языка XML Schema выражать требования модели включают использование условных XML-атрибутов 
с типом данных HL7 v3: тип данных CD должен использовать оба атрибута {@code и @codeSystem} или атрибут @nullFlavor.
Examples of the limited capabilities of the XML schema language to express the model requirements include the use of 
conditional XML attributes with a HL7 v3 data type: a CD data type should either use both the attributes 
{@code and @codeSystem}, or the attribute @nullFlavor.

Данное требование просто невозможно выразить с помощью XML Schema.
This requirement simply can't be expressed in XML schema. 

Последствием является то, что экземпляр CDA-документа, который только содержит @code будет считаться валидным документом, при
валидации по CDA XML-схеме.
This has the consequence that a CDA instance that only contains @code will be considered to be a valid document instance 
if validated against the CDA XML schema. 

Другой пример - использование пустых XML-элементов (<element/>); использование пустых элементов неразрешается ни в каких
HL7 v3-документах (см. сноску 1).
Another example is the use of empty XML elements (<element/>), these are not allowed in any HL7 version 3 instance 
(see Footnote 1).

Это ограничение также нельзя описать с помощью XML Schema.
This can't be specified in XML schema. 

Существуют обходные решения для некоторых из вышеописанных ограничений языка XML Schema; однако, они значительно увеличивают
определения шаблонов с помощью языка XML Schema.
There are complex workarounds for some of the above limitations of the XML schema language; these however lead to large 
and unwieldy schema definitions.

Обратите внимание: (сент. 2012) XML Schema 1.1, все еще не является финализированной специцификацией W3C и не поддерживает
многие из желаемых возможностей.
Note: (September 2012) XML Schema 1.1, a yet to be finalized W3C specification does support many of the desired features. 

Только планируется определить, будет ли большинство средств для работы с XML поддерживать версию 1.1 - это станет обязательным
требованием для HL7 начать генерацию XML Schema 1.1
It has yet to be determined whether or not most XML tools support version 1.1 - that would be a prerequisite for HL7 to start 
generating XML Schema 1.1.

Nictiz (голландаская организация-поставщик национальной сети медицинской информации, представленной в электронной форме),
предоставляет спецификации HL7 v3-артефактов, используемых в Нидерландах, опубликовала большой набор файлов в формате 
Schematron (в основном для типов данных и систем кодирования) для разрешения проблемы "неполной" валидации, поддерживаемой
XML-схемой.
Nictiz, the Dutch NHIN provider which specifies HL7 v3 artefacts for use in the Netherlands, has resorted to publishing a 
large set of Schematron files (mainly for data types and coding systems) to deal with the 'incomplete' validation as supported
by XML schema. 

Ограничения языка XML Schema также отражаются в документе, опубликованном в 2008 году, "Общие проблемы для реализаций 
HL7 CDA" ("Common issues found in implementations of the HL7 Clinical Document Architecture (CDA)" 
(http://www.ringholm.de/docs/03020_en_HL7_CDA_common_issues_error.htm) и документе "Анализ соответствия и удовлетворения
требованиям HL7 CDA R2, основанный на моделировании" "Model-based Analysis of HL7 CDA R2 Conformance and Requirements 
Coverage" (http://www.ejbi.org/img/ejbi/2015/2/Boufahja_en.pdf), подготовленный IHE в 2015 году.
The limitations of XML schema are also illustrated by the "Common issues found in implementations of the HL7 Clinical 
Document Architecture (CDA)" paper (http://www.ringholm.de/docs/03020_en_HL7_CDA_common_issues_error.htm) written in 2008, 
and the "Model-based Analysis of HL7 CDA R2 Conformance and Requirements Coverage" paper 
(http://www.ejbi.org/img/ejbi/2015/2/Boufahja_en.pdf) written by IHE in 2015.

Для того, чтобы обеспечить соответствие всем требованиям, выраженным моделью классов CDA, начальным этапом всех реализаций
должен стать формат обмена моделями CDA (CDA MIF).
In order to fulfill all requirements as expressed by the CDA class model the starting point for all CDA implementations would 
have to be the CDA MIF. 

MIF, тем не менее, имеет и свои недостатки - он является HL7-специфичным форматом, который поддерживается только ограниченным
набором средств.
MIF however has the disadvantage that it is a HL7 specific format which is only supported by a limited number of tools.

Подходы к разарботке программного обеспечения
Software development approaches

Текущие реализации CDA могут быть поделены на две категории: группа, которая использует XML-технологии и инструменты, и группа,
которая основывается на модели классов CDA (MIF или UML).
The current implementations of CDA can be divided in two categories: a group which uses XML technologies and tools, and 
another group which is based on the CDA class model (MIF or UML).

Реализация CDA на основе XML-подхода
CDA implementation using XML techniques

Основная причина использования XML-подхода при реализации CDA - это тот факт, что CDA основывается на стандарте XML:
экземпляры CDA-документов - это XML-документы, опубликована XML-схема для таких CDA-документов.
The main reason for using XML techniques when implementing CDA is the fact that CDA is based on the XML standard: 
CDA instances are XML documents and there is a published XML schema for CDA documents. 

Определения шаблонов обычно доступны в формате Schematron-файлов.
Template definitions are generally made available in the form of Schematron files. 

Schematron является частью семейства спецификаций XML; компилятор Schematron основывается на общем XSLT-движке.
Schematron is part of the XML family of specifications; a Schematron compiler is based on a generic XSLT engine. 

Поэтому, выбор в пользу XML-технологий очевиден.
The choice to use XML techniques is therefore an obvious one.

Генераторы классов (Class generators) обычно используются совместно с другими XML-технологиями, такими как Xpath и DOM/SAX.
Class generators are commonly used next to other well known XML techniques such as Xpath and DOM/SAX. 

JAXB - пример генератора классов: средство, которое трансформирует XML-схему в соответствующие классы Java.
JAXB is an example of a class generator: a tool which transforms XML schema to corresponding Java classes.

Ряд онлайн-инструментов валидации CDA основына на XML-технологиях (Schema и Schematron); примеры - NIST 
(http://xreg2.nist.gov/cda-validation/validation.html) и Lantana (https://www.lantanagroup.com/validator/).
A number of online CDA validation tools are based on XML techniques (Schema and Schematron); examples include NIST 
(http://xreg2.nist.gov/cda-validation/validation.html), and Lantana (https://www.lantanagroup.com/validator/). 

Эти средства могут использования для тестирования валидности CDA-документов.
These tools can be used to test for validity of CDA instances. 

XML-документ, определенный как валидный с помощью одного из данных инструментов не обязательно будет действительно валидным
CDA-документом, т.к. XML-основанные средства не способны провести анализ всех аспектов CDA-документа.
A XML document that is considered to be valid by these tools is not necessarily a valid CDA instance as XML-based tools are 
not capable of validating all aspects of a CDA.

Реализация CDA, основанная на моделировании
Model driven CDA implementation

Основой реализаций CDА на базе подхода, связанного с моделированием, является использование модели классов CDA, как 
задокументировано в CDA MIF.
The basis for model driven implementations is the CDA class model as documented in the CDA MIF. 

Из-за того факта, что CDA в своей основе - это информационная модель без каких-либо связанных с ней поведенческих аспектов,
существует возможность создания цельного мэппинга (соответствия) CDA MIF в UML, что в последствии позволяет использовать
UML-основанные инструменты.
Because of the fact that CDA essentially is an information model without any behavioral aspects associated with it one has 
the option of creating a very solid mapping from CDA MIF to UML, which in turn allows for the use of UML based tools.

CDA MIF (или его UML-эквивалент) может использоваться генераторами классов для создания набора классов (например, для Java 
или C#).
The CDA MIF (or the UML equivalent thereof) can be used by class generators to create a set of classes (in e.g. Java or C#). 

At this point in time (November 2010) there are a couple of freely available class generators which one could consider when 
implementing CDA:
На настоящий момент (ноябрь 2010) существует ряд свободно доступных генераторов классов, которые необходимо рассмотреть 
при реализации CDA:

MDHT (http://www.cdatools.org/), CDA-специфический генератор классов.
MDHT (http://www.cdatools.org/), a CDA specific class generator. 

This tool generates Java classes based on a UML representation of the CDA class model and on an OCL representation of 
applicable templates. 
Этот инструмент генерирует Java-классы, основанные на UML-представлении модели классов CDA и на OCL-представлении 
подходящих шаблонов.

Инструмент также поддерживает управление и определение шаблонов для работы с множеством определений шаблонов в руководствах
по реализации CDA.
The tool also supports the management and definition of templates to deal with the multitude of template definitions in CDA 
implementation guides. 

MDHT позволяет определение шаблонов в форме табличной структуры.
MDHT allows for the definition of templates in a table-like structure. 

Шаблоны могут быть определены как дополнительные ограничения для других шаблонов.
Templates can be defined to be additional constraints on other templates. 

Шаблоны, определенные данным способом, могут быть автоматически трансформированы в формализованные OCL-утверждения; такие
OCL-утверждения, в свою очередь, используются для генерирования Java-классов.
Templates defined in this way are automatically transformed into formal OCL statements; these OCL statements are in turn used
when generating the Java classes.

MARC-HI Everest (http://everest.marc-hi.ca, основанный на HL7 v3 MIF (а не только CDA) генератор классов.
MARC-HI Everest (http://everest.marc-hi.ca/), a HL7 version 3 (not just CDA) MIF-based class generator. 

Данный инструмент недавно (2014) стал поддерживать стандарт определения шаблонов от HL7.
This tool has recently (2014) embraced the HL7 Template Definition standard. 

Новый адд-он модуль (Sherpas) был разработан для компилирования HL7-шаблонов (например, таких же какие создаются ART DECOR) и 
для генерации кода.
A new add-on module (Sherpas) has been developed to compile the HL7 templates (e.g. as produced by ART DECOR) and to generate 
code. 

Sherpas доступен в 
Sherpas is available in the development branch of Everest and will be included in the 1.4 release of Everest (which will be 
released in the summer of 2015). 




The current (2014) Everest 1.3 release has only partial support for templates. See https://www.youtube.com/watch?v=p5oasVIQaNE&feature=youtu.be for a recorded presentation related to Everest and Sherpas.
There is an online validation tool based on MDHT (http://cdatools.org/validation/), and IHE hosts an online 2-step (schema as well as model based) validation tool (http://gazelle.ihe.net/EVSClient/cda/validator.seam?cid=9)
Green CDA
The GreenCDA Project added the concept of a simplified XML format that can be transformed to and from the full normative CDA XML format. This has the implementation advantage that simplified schema exist for GreenCDA versions of a CDA document - an improvement over the generic normative CDA schema in terms of validation strength as well as its suitability to be used as a basis for code generation. Simplified schema, optimized for human readability, generate readable code.
In principle each and every implementer could define their own GreenCDA format, GreenCDA describes a process and not a format. When the process of 'Greening' is applied to Entry-level CDA templates there can be a significant level of re-use between various CDA document types. generally such an approach will only be possible if one has to implement multiple document types based on one common set of templates (e.g. in the context of US Meaningful Use requirements, or when implementing a set of IHE PCC implementation guides for CDA).
When implemented in an XML-centric fashion the same caveats and limitations as described above (see section CDA implementation using XML techniques) apply; the biggest one being that XML-based tools are simply not capable of validating all aspects of a CDA.
However, one could also view the Green CDA format as a (simplified) class model, and use it for code generation. The normative full CDA format is then transformed to/from the Green CDA XML format, which in turn is generated/processed by the generated code.
Persistence

The CDA standard contains a number of requirements when it comes to the persistence of CDA documents. One of the requirements is that one should be able to reproduce the exact same XML instance which was originally received. In a relational database this requires that one stores the CDA document as a blob; or one could use a native XML database .
If one uses a class generator it is recommended that one uses an ORM (Object-Relational Mapper) toolkit to persist the data as present in the CDA instance. The CDA document is 'shredded' into its constituent data components. If data is extracted from a CDA document one should ensure that the relationship between the data and its source document is persisted as well - it could be that document (as a whole) is replaced or nullified at a later point in time, in which case one should also have the ability to designate the data as either nullified or replaced.
Processing

CDA documents may be based on a specific implementation guide and a series of templates. These provide context which may be used when processing the contents of the document. Knowledge of the context (the underlying use case) does allow one to reuse code.
In general it is advisable to use the available context for processing. As an alternative one could base the entire processing logic on the data itself, irrespective of the implementation guide and templates used.
Summary and Recommendations

The diagram below shows the relationships between the various artefacts discussed in this whitepaper. A CDA document has to conform to the requirements as defined in a CDA Implementation Guide. It has to conform to both the formal CDA class model as well as the templates. The CDA class model can be expressed in either MIF, or in a derived format such as UML or XML schema. Templates can be expressed in Schematron, or in OCL, or in MIF with OCL annotations. The actual validation of CDA instances is based on the expressions of the CDA class model and the applicable templates.
Cda implementation article.PNG
The use of XML techniques leads to the creation of CDA documents that are not valid instances of the CDA standard. If one is forced to solely rely on XML techniques (and up to about two years ago there really wasn’t any other available option) one should pay particular attention to the HL7 version 3 data types and coding systems. Those are areas that mostly lead to issues because of the lack of expressivity/richness of the XML schema language.
Sources at two of the organizations responsible for CDA online validation tools confirm the above: if they were to develop such a tool from scratch they would not base it on XML techniques. The current online tools produce too many false positives - documents which are erroneously declared to be valid CDA instances. The management of templates in the form of a set of Schematron files is also reported to be problematic.
A software application will have to be based on the CDA class model if one wishes to ensure that one creates valid CDA instances. Applications that are based on the CDA XML schema can't guarantee that the documents are valid CDA instances. Both the MDHT as well as the Everest toolkit support templates - they are the best candidates for a model based implementation.
Footnotes

On the use of empty XML elements (<element/>): in certain rather exotic circumstances empty XML elements may occur in HL7 version 3 instances. For example: if a model were to have a mandatory participation linked to a Role which has no required/mandatory attributes the Role could be present in the instance as an empty XML element. The CDA model doesn't contain any such requirements; a particular exotic CDA template could have this type of requirement as well, resulting in an empty XML element. The statement by the authors of this white paper that "no v3 instance SHALL contain an empty XML element" leads to a lot less "false positives" and a very small number of "false negatives".
